plugins {
    id 'com.android.application'
    id 'androidsvgdrawable'
}

configurations {
    all*.exclude group: 'com.google.android', module: 'android'
    all*.exclude group: 'androidx.viewpager', module: 'viewpager'
}

dependencies {
    implementation project(':integration-android')
    implementation 'androidx.annotation:annotation:1.3.0'
    implementation 'androidx.core:core:1.7.0'
    implementation 'androidx.fragment:fragment:1.3.6'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.2.0'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-service:2.5.0'
    implementation 'androidx.sqlite:sqlite:2.2.0'
    implementation "androidx.room:room-runtime:2.4.2"
    annotationProcessor "androidx.room:room-compiler:2.4.2"
    implementation 'org.bitcoinj:bitcoinj-core:0.16.1'
    implementation 'com.google.guava:guava:31.1-android'
    implementation 'com.google.zxing:core:3.4.1'
    //noinspection GradleDependency
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    //noinspection GradleDependency
    implementation 'com.squareup.okhttp3:logging-interceptor:3.14.9'
    implementation 'com.squareup.moshi:moshi:1.11.0'
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'com.github.tony19:logback-android:2.0.0'
    testImplementation 'junit:junit:4.13.2'
}

boolean signConfigExists = project.hasProperty("keystoreFile") &&
                           project.hasProperty("keystorePassword") &&
                           project.hasProperty("keystoreAlias") &&
                           project.hasProperty("keystoreAliasPassword")

android {
    if (signConfigExists) {
        signingConfigs {
          release {
              storeFile file(project.property("keystoreFile"))
              storePassword project.property("keystorePassword")
              keyAlias project.property("keystoreAlias")
              keyPassword project.property("keystoreAliasPassword")
          }
        }
    }

    compileSdkVersion 'android-31'
    buildToolsVersion '30.0.3'

    defaultConfig {
        applicationId 'de.schildbach'
        minSdkVersion 14
        targetSdkVersion 31
        dexOptions {
            preDexLibraries false
        }
        // https://www.tanelikorri.com/tutorial/android/set-apk-filename-in-gradle/
        setProperty('archivesBaseName', 'bitcoin-wallet')
    }

    buildTypes {
        all {
            minifyEnabled true
            shrinkResources false
            proguardFile 'proguard.cfg'
            if (signConfigExists) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            debuggable true
        }
    }

    flavorDimensions 'flavor'
    productFlavors {
        dev {
            dimension 'flavor'
            applicationIdSuffix '.wallet_test'
        }
        prod {
            dimension 'flavor'
            applicationIdSuffix '.wallet.sw'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
        prod {
            res.srcDirs = ['res-prod']
            assets.srcDirs = ['assets-prod']
        }
        test {
            java.srcDirs = ['test']
            resources.srcDirs = ['test']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }

    packagingOptions {
        exclude 'META-INF/*.version'
        exclude 'META-INF/proguard/**'
        exclude 'META-INF/services/**'
        exclude '**/*.proto'
        exclude 'org/bouncycastle/x509/*.properties'
        exclude 'okhttp3/internal/publicsuffix/*'
        exclude 'org/bitcoinj/crypto/mnemonic/wordlist/english.txt'
        exclude 'org/bitcoinj/crypto/cacerts'
        exclude 'org.bitcoin.production.checkpoints.txt'
        exclude 'org.bitcoin.test.checkpoints.txt'
    }
}

task svgToPngMipmap(type: fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask) {
    from = files('graphics/mipmap')
    to = file('res')
    targetedDensities = ['xxhdpi', 'xxxhdpi']
    outputFormat = 'PNG'
    outputType = 'mipmap'
}

task svgToPngMipmapProd(type: fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask) {
    from = files('graphics-prod/mipmap')
    to = file('res-prod')
    targetedDensities = ['xxhdpi', 'xxxhdpi']
    outputFormat = 'PNG'
    outputType = 'mipmap'
}
